version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete files uploaded to S3
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            # Remove backend stack
            aws cloudformation delete-stack --stack-name UDA-PEOPLE-BACKEND-${CIRCLE_WORKFLOW_ID:0:7}
            # Remove frontend stack
            aws cloudformation delete-stack --stack-name UDA-PEOPLE-FRONTEND-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export ifMigrationRan=$(curl -s -o /dev/null "%{body}" -H "token: 4451b76e-6c0c-4282-8c72-1e80ae2306db" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if [ $ifMigrationRan == 1 ]
            then
              npm migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ./backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd ./frontend
            pwd
            ls -ltr
            export PATH=$PATH:/home/circleci/project/frontend/node_modules/.bin
            echo $PATH
            # npm test
            echo "Pass Simulation"
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd ./backend
            pwd
            ls -ltr
            export PATH=$PATH:/home/circleci/project/backend/node_modules/.bin
            echo $PATH
            # npm test
            echo "Pass Simulation"
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd ./frontend
            # npm audit --audit-level=critical
            echo "Pass Simulation"
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd ./backend
            # npm audit --audit-level=critical
            echo "Pass Simulation"
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y gzip tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags UdaPeople=UdaPeopleBackend \
              --stack-name UDA-PEOPLE-BACKEND-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags UdaPeople=UdaPeopleFrontend \
              --stack-name UDA-PEOPLE-FRONTEND-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: Check if stacks are ready
          command: |
            # Backend
            while true
              do
                aws cloudformation describe-stacks --stack-name UDA-PEOPLE-BACKEND-${CIRCLE_WORKFLOW_ID:0:7} > temp_log.txt
                if grep -q "CREATE_FAILED" temp_log.txt; then
                  return 1;
                elif grep -q "CREATE_COMPLETE" temp_log.txt; then
                  break;
                fi
                sleep 2;
              done
          
            # Frontend
            while true
              do
                aws cloudformation describe-stacks --stack-name UDA-PEOPLE-FRONTEND-${CIRCLE_WORKFLOW_ID:0:7} > temp_log.txt
                if grep -q "CREATE_FAILED" temp_log.txt; then
                  return 1;
                elif grep -q "CREATE_COMPLETE" temp_log.txt; then
                  break;
                fi
                sleep 2;
              done
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  configure-infrastructure:
    docker:
      - image: ansible/ansible:ubuntu1404
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a9:8c:1f:02:e9:99:be:1a:dd:d0:65:d3:ec:50:ff:21"]
      - attach_workspace:
          at: .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            npm run migrations 2>&1 | tee migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migrations_log.txt; then
              curl -H "Content-Type: text/plain" -H "token: 4451b76e-6c0c-4282-8c72-1e80ae2306db" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              curl -H "Content-Type: text/plain" -H "token: 4451b76e-6c0c-4282-8c72-1e80ae2306db" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update -y
            apy upgrade
            apt install nodejs -y
            apt install npm -y
            nodejs -v
            npm -v
      - attach_workspace:
          at: .circleci/ansible/inventory.txt
      - run:
          name: Get backend url
          command: |
            sed -n '2p' .circleci/ansible/inventory.txt > .circleci/ansible/backendip.txt
            export BACKEND_IP=$(cat .circleci/ansible/backendip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID}/
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  deploy-backend:
    docker:
      - image: ansible/ansible:ubuntu1404
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a9:8c:1f:02:e9:99:be:1a:dd:d0:65:d3:ec:50:ff:21"]
      - attach_workspace:
          at: .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  smoke-test:
    docker:
      - image: alpine:3.13.5
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
      - attach_workspace:
          at: .circleci/ansible/inventory.txt
      - run:
          name: Get backend url
          command: |
            sed -n '2p' .circleci/ansible/inventory.txt > .circleci/ansible/backendip.txt
            export BACKEND_IP=$(cat .circleci/ansible/backendip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export BackendTestHttpCode=$(curl -s -o /dev/null -w "%{http_code}" ${API_URL})
      - run:
          name: Frontend smoke test.
          command: |
            export FrontendURL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-eu-west-2.amazonaws.com"
      - run:
          name: Rollback in case of failure
          command: |
            # Backend
            if [ $BackendTestHttpCode != 200 ]
            then
              echo "Backend smoke test failed"
              return 1;
            fi
            # Frontend
            if curl -s ${FrontendURL} | grep "Welcome"
            then
              return 1;
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation update-stack \
            --template-file .circleci/files/cloudfront.yml \
            --tags UdaPeople=UdaPeopleFrontend \
            --stack-name UDA-PEOPLE-FRONTEND-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
          mentions: "@EngineeringTeam"
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]